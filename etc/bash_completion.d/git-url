# shellcheck shell=bash

#######################################
# git-url
# Globals:
#   COMPREPLY
# Arguments:
#   1     name of the command whose arguments are being completed
#   2     word being completed ("cur")
#   3     word preceding the word being completed or $1 when is the first word ("prev")
#######################################
_git_url() {
  local argument=""
  local commands=(-h --help) formats=(--file --git --https --pip --raw --ssh --web) options=(--ping) remotes=()
  mapfile -t remotes < <(git remote)

  ! inargs "${COMP_WORDS[1]}" "${commands[@]}" || return 0

  # FIXME: esta mal el git name porque pones <or> y no selecciona
  # TODO: acabar, mirar que si formats esta vac√≠o ...
  #  mirar la palabra concreta
  if inargs "${options[0]}" "${COMP_WORDS[@]}"; then
    options=()
  else
    for _i in --git --ssh; do
      ! inargs "${_i}" "${COMP_WORDS[@]}" || { options=(); break; }
    done
  fi

  for _i in "${formats[@]}"; do
    ! inargs "${_i}" "${COMP_WORDS[@]}" || { formats=(); break; }
  done

  for _i in "${remotes[@]}"; do
    ! inargs "${_i}" "${COMP_WORDS[@]}" || { remotes=(); break; }
  done

  [[ $COMP_CWORD -eq 1 ]] || commands=()

#  case "$2" in
#    -F|--formatter|--report-formatter) options=(); commands=(); list=() ;;
#    *)
#      mapfile -t list < <(comm -23 <("$1" list) <(printarr "${COMP_WORDS[@]:1:COMP_CWORD-1}"))
#      mapfile -t options < <(comm -23 <(printarr "${options[@]}") <(printarr "${COMP_WORDS[@]:1:COMP_CWORD-1}"))
#      ;;
#  esac
  mapfile -t COMPREPLY < <(compgen -W "${commands[*]} ${formats[*]} ${options[*]} ${remotes[*]}" -- "$2")
}

complete -F _git_url git-url
