#!/bin/sh

set -eu

# TODO: terminal con el git-url y poner pruebas de los git que he añadido y ver si hay otro git-name
#  seguir con el puto genman, ver que hago con los git-commands si pongo directorio de git con symlinks
#######################################
# die with error
# Arguments:
#  None
#######################################
die() {
  rc=$?
  >&2 echo "${0##*/}: $*"
  exit "${rc:-1}"
}

#######################################
# git spec
# Globals:
#   SCRIPT
# Arguments:
#  None
#######################################
spec() {
  cat <<EOF
${GIT_COMMAND} [$(git blue "ARGUMENT")] [$(git blue "FORMAT")]
${COLOR_SCRIPT} [$(git red "<remote>")|$(git red "<owner/repo>")|$(git red "<url>")] \
[$(git red "--file")|$(git red "--git")|$(git red "--https")|$(git red "--pip")|$(git red "--raw")|\
$(git red "--ssh")|$(git red "--web")]
${COLOR_SCRIPT} $(git red "<remote>")
${COLOR_SCRIPT} $(git red "<owner/repo>")
${COLOR_SCRIPT} $(git red "<url>")
${COLOR_SCRIPT} $(git red "<remote>") $(git red "--ssh")
${COLOR_SCRIPT} $(git red "<url>") $(git red "--raw")
${COLOR_SCRIPT} $(git red "--web") $(git red "<owner/repo>")
${COLOR_SCRIPT} $(git red "--pip")
${COLOR_SCRIPT} $(git red "--ssh")

${COLOR_SCRIPT} - remote from config $(git red "<remote>"), $(git red "<url>") or \
$(git red "<owner/repo>") (default: $(git red "origin"))
          Valid $(git blue "ARGUMENTS"): $(git red "<remote>"), $(git red "<url>") or \
$(git red "<owner/repo>").
          Only one $(git blue "ARGUMENT") and/or one $(git blue "FORMAT") can be provided.
          Any $(git blue "FORMAT") can be used for $(git red "<url>") as $(git blue "ARGUMENT").
          Default branch is used for $(git red "--raw").
          Use ${COLOR_SCRIPT} instead of ${GIT_COMMAND} when running outside a git repository \
with an $(git blue "ARGUMENT") of type $(git red "<owner/repo>") or $(git red "<url>").
--
h,help      Show help and exit.
b,ping      Check reachability of url.

 $(git blue "FORMATS"):
file!        Local url: i.e.: $(git magenta "git+file://<user>/<repo>")
git!         $(git red "Default") url, i.e.: $(git magenta "https://github.com/<user>/<repo>.git")
https!       HTTPS url, i.e.: $(git magenta "git+https://github.com/<user>/<repo>.git")
pip!         PIP url, i.e: $(git magenta "git+ssh://git@github.com/<user>/<repo>.git")
raw!         GitHub raw url, i.e: $(git magenta "https://raw.githubusercontent.com/<user>/<repo>/<branch>")
ssh!         SSH url, i.e: $(git magenta "git@github.com:<user>/<repo>.git")
web!         GitHub web url, i.e.: $(git magenta "https://github.com/<user>/<repo>")
EOF
}

#######################################
# format url
# Globals:
#   opt
# Arguments:
#  [<remote>|<owner/repo>|<url>]     remote name, owner/repo or path (default: origin)
#######################################
format() {
  name="$(git-name "$1")"; [ "${name-}" ] || die url repo: "$@"
  owner="$(git-owner "$1")"; [ "${owner-}" ] || die url name: "$@"
  prefix="https://github.com/"
  suffix=".git"
  case "${format:-git}" in
    --file) prefix="git+file://"; suffix="" ;;
    --git) : ;;
    --https) prefix="git+https://github.com/" ;;
    --pip) prefix="git+ssh://git@github.com/" ;;
    --raw) prefix="https://raw.githubusercontent.com/"; suffix="/$(git-default "$1")" ;;
    --ssh)  prefix="git@github.com:" ;;
    --web) suffix="" ;;
  esac
  echo "${prefix}${owner}/${name}${suffix}"
}

# TODO: aqui lo dejo probar esto, habría que hacer un checkout default,
#  probar url y seguir con submodule que necesita los git all y clone...
#   copiar de semver el como calcula el tag actual
#   Algo de si valid url, añadir un --ping aqui??? y cambiar el ping a ssh access algo mas genérico
#######################################
# git url
# Globals:
#   opt
#######################################
main() {
  ping=false
  
  for arg; do
    case "${arg}" in
      -h|--help) . git-parse.sh || exit ;;
      --file|--git|--https|--pip|--raw|--ssh|--web)
        [ ! "${format-}" ] || die "${arg}, ${format}: only one format can be provided"
        format="${arg}"
        ;;
      --ping) ping=true ;;
      *)
        [ ! "${format-}" ] || die "${arg}, ${format}: only one argument can be provided remote|owner/repo|url"
        argument="${arg}" ;;
    esac
  done

#  while test $# != 0; do
#    case "$1" in
#      --) shift; break ;;
#      --*) opt="$1"  ;;
#    esac
#    shift
#  done

  argument="${1:-origin}"
  : "${format=git}"

#  >&2 echo "opt: ${opt-}, argument: ${argument-}"
  if echo "${argument}" | grep -q '/' || [ "${opt-}" ]; then
    url="$(format "${argument}")"
  else
    url="$(git config remote."${argument}".url)" || die Invalid Remote: "${argument}"
  fi

  if $ping; then
    case "${format}" in
      --git|--ssh) git ls-remote "${url}" CHECK_GIT_REMOTE_URL_REACHABILITY ;;
      *) die "--ping: can only be used with --git|--ssh" ;;
    esac
  fi

  echo "${url}"
}

main "$@"
