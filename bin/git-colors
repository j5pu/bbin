#!/bin/sh

set -eu

#######################################
# git colors demo and git-* color scripts
# Arguments:
#   None
# Info:
#   first color given is the foreground; the second is the background
#   default: explicitly resets the color to the terminal default, for example to specify a cleared background.
#            Although it varies between terminals, this is usually not the same as setting to "white black"
#   normal:  makes no change to the color. It is the same as an empty string, but can be used as the
#            foreground color when specifying a background color alone (for example, "normal red")
#   reset:   resets all colors and attributes before applying the specified coloring. For example, reset green
#            will result in a green foreground and default background without any active attributes.
#######################################
colors="black blue cyan green magenta normal red yellow white"  # bright: brightred
attributes="blink bold dim italic reverse strike ul"  # turned off attribute, e.g.: noreverse, no-ul

for fg in ${colors}; do
  printf -- "%s\n" "$(git config --get-color "" "${fg}")${fg}$(git config --get-color "" reset)"
  [ "${fg}" = "normal" ] || [ "${fg}" = "default" ] || printf -- "%s\n" \
    "$(git config --get-color "" "bright${fg}")${fg} bright$(git config --get-color "" reset)"
  for attribute in ${attributes}; do
    c="${fg} ${attribute}"
    printf -- "%s\n" "$(git config --get-color "" "${c}")${c}$(git config --get-color "" reset)"
  done
  for attribute in ${attributes}; do
    c="${fg} ${attribute}"
    for bg in ${colors}; do
      printf -- "%s\n" "$(git config --get-color "" "${c} ${bg}")${c} bg ${bg}$(git config --get-color "" reset)"
    done
  done
  echo
done

for fg in $(echo "${colors} bold italic" | sort); do
  git "${fg}" git "${fg}"
  echo
done
