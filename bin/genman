#!/usr/bin/env bash

#
# converts, tests and commit changes for AsciiDoc man pages in a repository

set -euo pipefail
shopt -s inherit_errexit

. utils.bash

# TODO: seguir con el puto genman, ver que hago con los git-commands si pongo directorio de git con symlinks

#######################################
# die with error
# Arguments:
#  None
#######################################
die() {
  rc=$?
  >&2 echo "${SCRIPT}: $*"
  exit $rc
}

#######################################
# Identifies files to be removed, changed files and new files, relative to $GENERATED and $DEST (i.e.: man1/remove.1)
# Globals:
#   COMMON_FILES
#   DEST
#   GENERATED
#   NEW_FILES
#   REMOVE_FILES
# Arguments:
#   1   man file
#######################################
files() {
  local dest_files="" generated_files=""
  ! test -d "${DEST}" || dest_files="$(find "${DEST}" -type f | sed "s|${DEST}/||g" | sort)"
  ! test -d "${GENERATED}" || generated_files="$(find "${GENERATED}" -type f | sed "s|${GENERATED}/||g" | sort)"
  REMOVE_FILES="$(comm -23 <(echo "${dest_files}") <(echo "${generated_files}"))"
  NEW_FILES="$(comm -13 <(echo "${dest_files}") <(echo "${generated_files}"))"
  COMMON_FILES="$(comm -12 <(echo "${dest_files}") <(echo "${generated_files}"))"
}

#######################################
# filter man output to see real differences (will not copy the man page - ignores date, version, etc.)
# Arguments:
#   1   man file
#######################################
filter() {
  local tmp
  tmp="$(mktemp)"
  grep -vE " Generator:|      Date:|    Source:|.TH" "$1" > "${tmp}"
  echo "${tmp}"
}

#######################################
# is function in SRC_FILE?
# Globals:
#   SRC_FILE
# Arguments:
#  None
#######################################
has_function() { filefuncs "${SRC_FILE}" | grep -q "^${1:-main}$"; }

#######################################
# shows invalid function comment block error message
# Globals:
#   BLOCK
# Arguments:
#   1
#######################################
invalid() {
  local empty i
  [ "${BLOCK-}" ] || empty=empty
  >&2 echo "${SCRIPT}: ${SRC_FILE}: ${empty:-invalid} comment block for function: ${1}"
  if [ "${BLOCK-}" ]; then
    >&2 cat <<EOF
@ BLOCK START @
$(for (( i=${#BLOCK[@]}-1; i>=0; i-- )) ; do
echo "${BLOCK[i]}"
done)
@ BLOCK END @
EOF
  fi
  exit 1
}

#######################################
# is commented line
# Arguments:
#   1
#######################################
is_commented() { [[ "$1" =~ ^# ]]; }

#######################################
# is commented line
# Arguments:
#   1
#######################################
is_start_or_end() { is_commented "$1" && [ "$1" = "#######################################" ]; }

#######################################
# extract description for header in file
# Globals:
#   SRC_FILE      Command source code.
#######################################
manpurpose-file(){
  local content line
  readarray -t content < "${SRC_FILE}"
  for line in "${content[@]}"; do
    if is_start_or_end "${line}"; then
      false || die "${SRC_FILE}: empty file description and start block comment found for: ${MANNAME}"
    elif [ "${line-}" ] && [[ "${line}" =~ ^# ]] && ! [[ "${line}" =~ ^#!|^"# shellcheck"|^"# bashsupport" ]]; then
      line="$(echo "${line}" | sed 's/^#//'| xargs | sed 's/\.$//')"
      [ ! "${line-}" ] || break
    else
      line=""
    fi
  done
  [ "${line-}" ] || die "${SRC_FILE}: empty file description for: ${MANNAME}"
  echo "${line}"
}

#######################################
# extract description for function in file
# Globals:
#   SRC_FILE      Command source code.
# Arguments:
#   1             Function name.
#######################################
manpurpose-func() {
  BLOCK=()
  local content expect_comment=false found_block_start=false i line
  has_function "$1" || return 0

  readarray -t content < <(tail -r "${SRC_FILE}")

  for i in "${!content[@]}"; do
    line="${content[$i]}"
    if [[ "${line}" =~ ^${1}\(\) ]]; then
      expect_comment=true
    elif $expect_comment && ! is_commented "${line}"; then
      invalid "$1"
    elif $expect_comment && ! $found_block_start && is_start_or_end "${line}"; then
      found_block_start=true
      BLOCK+=("${line}")
    elif $expect_comment && $found_block_start && is_start_or_end "${line}"; then
      echo "${content[$((i-1))]}" | sed 's/^#//; s/\.$//' | awk '{$1=$1};1'
      return
    elif $expect_comment; then
     BLOCK+=("${line}")
    fi
  done
  invalid "$1"
}

#######################################
# test generated man page, only once: first with file, if not $PAGE searching in $MANPATH
# Globals:
#   author        The author.
#   BOTTOM_LEFT   Button left text of man page.
#   MANNAME       Command or function name.
#   TOP_CENTER    Top center text of man page.
#   TOP_LEFT      Top left text of man page.
#   TOP_RIGHT     Top right text of man page.
# Arguments:
#   1             Generated man page.
#######################################
tests() {
  readarray -t PAGE < <(COLUMNS=160 man -P cat "${MANVOLNUM}" "${MANNAME}")

  [ "${PAGE-}" ] || die "MANVOLNUM: ${MANVOLNUM}, MANNAME: ${MANNAME}, output: ${1}, MANPATH: ${MANPATH}"

  for i in "${TOP_LEFT}" "${TOP_CENTER}" "${TOP_RIGHT}"; do
    tests_line "${i}" 0 "$1"
  done

  { ! $NAME_SECTION_ADD || grep -q "${PAGE[5]/       /}" <<< "       ${NAME_SECTION}"; } \
    || die "${MANNAME}: search: '${NAME_SECTION}', line: '${PAGE[5]/       /}': not found: ${1}"

  for i in "${BOTTOM_LEFT}" "${BOTTOM_RIGHT}"; do
    tests_line "${i}" $(( ${#PAGE[@]}-1 )) "$1"
  done
}

#######################################
# test final page destination directory
# Arguments:
#   1  dest_file
#######################################
test_final() {
  local manvolnum="${1##*.}" manname
  manname="$(basename  "${1}" ".${manvolnum}")"
  man "${manvolnum}" "${manname}" >/dev/null || die "$1: dest_file, MANPATH: ${MANPATH}"
}

#######################################
# test line of man page
# Globals:
#   PAGE      man page
# Arguments:
#   1         text
#   2         line number
#######################################
tests_line() {
  local line="${PAGE[${2}]}"
  grep -q "$1" <<< "${line}" || die "${MANNAME}, search: '${1}', line: '${line}': not found: ${3}"
}

#######################################
# main function
# checks file description for scripts/file and function comment for libraries in libexec
# If NAME section then source code is not searched for description comment.
# If argument is file does not do git and output the temp file created.
# When file executable mas be in ../../bin and lib in ..../exec from .adoc file.
# --change-mansource option for testing, run 'genman' and 'genman --change-mansource' and ls -la genman.1,
#     file is not updated (only when no .adoc file provided, otherwise ignored)
# Globals:
#   author        The author.
#   BOTTOM_LEFT   Button left text of man page.
#   manpurpose    Command description for NAME section, obtained from main function or header in scripts
#                 and from function in libraries.
#   dest_dir      Destination directory.
#   dest_file     Destination file path
#   dest_filename Destination filename.
#   file          Input ascii doctor file.
#   MANNAME       Command or function name.
#   orgname       Git repository owner.
#   repo          Git repository name.
#   SRC_FILE      Command source code.
#   TOP_CENTER    Top center text of man page.
#   TOP_LEFT      Top left text of man page.
#   TOP_RIGHT     Top right text of man page.
# Arguments:
#   1             [--desc|--help|--manrepo|--version] [directory]
#######################################
main(){
  SCRIPT="${0##*/}"
#  SRC_FILE=$1
#  manpurpose-file
#  exit
  local arg author change_mansource=false commit=() corner dest_file dir doctitle file files
  local filename find generated_file libexec libexec_dir manmanual manpurpose manpurpose_opt=() mansource
  local one=false one_top orgname output repo src template

  for arg do
    shift
    case "${arg}" in
      --change-mansource) change_mansource=true ;;
      --*) fromman "$0" "$@" || exit 0 ;;
      *)
        if test -f "${arg}"; then
          [ "${arg##*.}" = "adoc" ] || die "${arg}: not an '.adoc'"
          one=true
          files="${arg}"
        else
          cd "${arg}" || die "${arg}: No such directory"
        fi
    esac
  done

  cd_top_exit

  { ! [[ "${PWD}" =~ .*/bbin ]] || test "${BBIN_DEVELOPMENT}" -eq 1; } || \
    die "${PWD}: man pages can only be generated when \$BBIN_DEVELOPMENT=1 for: bbin"

  if $one; then
    one_top="$(pwd_p "${files}")/../.."
    libexec_dir="${one_top}/libexec"
    path_add_exist_all "${one_top}"
  else
    find=( "${GIT_TOP}" ); [ ! -d "${GIT_TOP}/src/man" ] || find+=( "${GIT_TOP}/src/man" )
    files="$(find "${find[@]}" -type f \( -name "*.adoc" -o -name "README.adoc" \) \
      -mindepth 1 -maxdepth 1 -not -path "*/templates/*" | grep -v '=')"
    [ "${files-}" ] || die "${GIT_TOP}: no .adoc files found"
    libexec_dir="${GIT_TOP}/libexec"
    path_add_exist_all
  fi

  author="$(git owner)" || die "$(pwd): invalid git owner"
  orgname="${author}"
  repo="$(git name)" || die "$(pwd): invalid git repo name"
  template="$(pwd_p "$0")/../src/man/templates/template.adoc"
  test -f "${template}" || die "${template}: no such file"

  GENERATED="$(mktemp -d)"
  path_add "${GENERATED}" MANPATH

  DEST="${GIT_TOP}/share/man"
  mkdir -p "${DEST}"

  while read -r file; do
    MANVOLNUM=1
    src="${file%.*}"
    MANNAME="${src##*/}"  # name.1 or name

    NAME_SECTION_ADD=false; grep -q "== NAME" "${file}" || NAME_SECTION_ADD=true
    case "${MANNAME}" in
      README)
        MANNAME="$(head -1 README.adoc | awk -F '[()= ]' '/\([1-8])/ { print $3 }')"
        [ "${MANNAME}" != 'doctitle' ] || die "${MANNAME}: invalid doctitle for README.adoc: "
        MANVOLNUM="$(head -1 README.adoc | awk -F '[()= ]' '/\([1-8])/ { print $4 }')"
        ;;
      *.[1-8]) MANVOLNUM="${MANNAME##*.}"; MANNAME="${MANNAME%.*}" ;;  # Do not change order !!!
    esac

    if $NAME_SECTION_ADD; then
      manpurpose=""
      SRC_FILE="$(which "${MANNAME}" || true)"
      if [ "${SRC_FILE-}" ]; then
        manpurpose="$(manpurpose-file)"
        [ "${manpurpose-}" ] || die "${SRC_FILE}: empty file description for: ${MANNAME}"
      elif ! test -d "${libexec_dir}"; then
        die "${libexec_dir}: libexec does not exist and not executable found for: ${MANNAME}"
      else
        libexec="$(find "${libexec_dir}" -type f \( -name "*.sh" -o -name "*.bash" \))"
        [ "${libexec-}" ] || die "${libexec_dir}: no *.sh/*.bash found for: ${MANNAME}"

        while read -r SRC_FILE; do
          manpurpose="$(manpurpose-func "${MANNAME}")"
          [ ! "${manpurpose-}" ] || break
        done <<<"${libexec}"
        [ "${manpurpose-}" ] || die "${libexec_dir}: function description or executable not found for: ${MANNAME}"
      fi
      manpurpose_opt=(-a manpurpose="${manpurpose}")
    fi

    filename="${MANNAME}.${MANVOLNUM}"  # name.1
    dir="${GENERATED}/man${MANVOLNUM}"; mkdir -p "${dir}"
    output="${dir}/${filename}"

    manmanual="${MANNAME^} Manual"
    mansource="${MANNAME^}"; ! $change_mansource || mansource=$RANDOM
    doctitle="${MANNAME^^}(${MANVOLNUM})"

    asciidoctor -b manpage \
      -a doctype=manpage \
      -a doctitle="${doctitle}" \
      -a manname="${MANNAME}" \
      "${manpurpose_opt[@]}" \
      -a manmanual="${manmanual}" \
      -a mansource="${mansource}" \
      -a author="${author}" \
      -a orgname="${orgname}" \
      -a repo="${repo}" \
      -a template="${template}" \
      -a allow-uri-read \
      -o "${output}" "${file}"

    corner="${MANNAME^^}(${MANVOLNUM})"
    TOP_LEFT="^${doctitle} "
    TOP_CENTER=" ${manmanual} "
    TOP_RIGHT=" ${doctitle}$"
    BOTTOM_LEFT="${mansource} "
    BOTTOM_RIGHT=" ${doctitle}$"
    ! $NAME_SECTION_ADD || NAME_SECTION="${MANNAME} - ${manpurpose}"

    tests "${output}"
#
#    PAGE_GENERATED=false
#    tests "${output}"
#    if ! $PAGE_GENERATED; then
#      MANPATH="${GENERATED}${MANPATH:+:${MANPATH}}"
#      tests "${MANNAME}" "${MANVOLNUM}"
#      $PAGE_GENERATED || die "${MANNAME}: ${MANVOLNUM}: ${MANPATH}: test not done because no \$PAGE"
#    fi
  done <<< "${files}"

  if $one; then
    >&2 printf "%s " man
    echo "${output}"
    return 0
  fi

  files
  
  if [ "${REMOVE_FILES-}" ]; then
    for i in ${REMOVE_FILES}; do
      dest_file="${DEST}/${i}"
      rm "${dest_file}"
      ! git rm -f --quiet "${dest_file}" 2>/dev/null || commit+=("${dest_file}")
    done
  fi

  if [ "${NEW_FILES-}" ]; then
    for i in ${NEW_FILES}; do
      dest_file="${DEST}/${i}"
      mkdir -p "$(dirname "${dest_file}")"
      cp "${GENERATED}/${i}" "${dest_file}"
      test_final "${dest_file}"
      git add -f "${dest_file}"
      commit+=("${dest_file}")
    done
  fi

  if [ "${COMMON_FILES-}" ]; then
    for i in ${COMMON_FILES}; do
      dest_file="${DEST}/${i}"
      generated_file="${GENERATED}/${i}"

      # Does not update the man page If there are no real differences in man page (excludes version, date, etc)
      if ! git diff --no-index --no-patch "$(filter "${dest_file}")" "$(filter "${generated_file}")" >/dev/null; then
        cp "${generated_file}" "${dest_file}"
        test_final "${dest_file}"
        git add -f "${dest_file}"
        commit+=("${dest_file}")
      fi
    done
  fi

  [ ! "${commit-}" ] || git commit --quiet -m "${SCRIPT}" "${commit[@]}" >/dev/null
}

main "$@"
