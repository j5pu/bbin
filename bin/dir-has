#!/bin/sh

set -eu

rc=0

#######################################
# show usage
# Arguments:
#   1
#######################################
help() {
  case "$1" in
    -h|--help|help) : ;;
    *) return 0 ;;
  esac

  >&2 cat <<EOF
usage: ${0##*/} [directory...]
   or: [directory...] | ${0##*/}
       ${0##*/} [-h|--help|help]

directory/s exist and have files, including hidden files and folders or does not exist

Arguments:
  [directory...]      directory or directories (default: cwd) or from stdin if not input

Commands:
   -h, --help, help   display this help and exit.

Returns:
   1 if at least one of directories passed is empty or does not exist

Output:
   Shows empty directories or missing directories to stderr.

Examples:
  $ ${0##*/}
  $ ${0##*/} ~
  $ ${0##*/} foo
  foo
  $ find . -type d | ${0##*/}
  $ mkdir -p /tmp/has{1,2} && touch /tmp/has{1,2}/f; ${0##*/} /tmp/has{1,2}
  $ rm /tmp/has1/*; ${0##*/} /tmp/has{1,2}
  /tmp/has1
EOF
  exit "${rc:-1}"
}

#######################################
# show to stderr and mark exit code
# Arguments:
#   1    directory
#######################################
std() { >&2 echo "$1"; rc=1; }

#######################################
# directory or directories exist and have files, including hidden files and folders or does not exist
# Arguments:
#   1   path/s to directory (default: cwd)
#######################################
main() {
  for arg; do
    dir="$(pwd_p "${arg}")"
    test -d "${dir}" || { std "${arg}"; continue; }
    [ -n "$(find "${dir}" -mindepth 1 -maxdepth 1)" ] || std "${arg}"
  done
  exit $rc
}

if test $# -ne 0; then
  help "$@"
elif ! test -t 0; then
  while read -r arg; do
    set -- "$@" "${arg}"
  done
else
  set -- "$@" .
fi

main "$@"

